from pycoin.serialize import b2h, h2b
from pycoin import encoding
import rlp
from ethereum import tester, utils, abi, blocks, transactions
import requests
import json
import jsonrpc
import time
from ethereum.abi import ContractTranslator
from ethereum.utils import mk_contract_address
from bike.parsing.fastparserast import Node


global_wait_for_confirm = True
use_ether_scan = False
use_augor = False
ether_scan_api_key = '66FCG5X3HSVW23R2ZJTFJEKWMKKGJVIQXK'
local_url = "http://localhost:8545/jsonrpc"
augor_local_url = "https://eth3.augur.net/jsonrpc"

def merge_two_dicts(x, y):
    '''Given two dicts, merge them into a new dict as a shallow copy.'''
    z = x.copy()
    z.update(y)
    return z

def etherscan_call(method_name, params):
    url = "https://testnet.etherscan.io/api"
    payload = {"module" : "proxy",
               "action" : method_name,
               "apikey" : ether_scan_api_key }
    payload = merge_two_dicts(payload, params[0])
    response = requests.post(url, params=payload)
    return response.json()[ 'result' ]
    
    
def json_call(method_name, params):
    if use_ether_scan:
        return etherscan_call(method_name, params)
    url = local_url
    if use_augor:
        url = augor_local_url
    headers = {'content-type': 'application/json'}
    
    # Example echo method
    payload = { "method": method_name,
                "params": params,
                "jsonrpc": "2.0",
                "id": 1,
                }
    # print str(params)
    response = requests.post(url, data=json.dumps(payload), headers=headers).json()
    # print str(response)
    print response
    return response[ 'result' ]

global_nonce = -1
def get_num_transactions(address):
    global global_nonce
    # if( global_nonce > 0 ):
    #    global_nonce += 1
    #    return "0x" + "%x" % global_nonce
    if use_ether_scan:
        params = [{ "address" : "0x" + address, "tag" : "pending" }]
    else:
        params = [ "0x" + address, "pending" ]
    nonce = json_call("eth_getTransactionCount", params)
    # print "nonce: " + str(nonce)
    global_nonce = int(nonce, 16)
    return nonce 

def get_gas_price_in_wei():
    if use_ether_scan:
        return "0x%x" % 20000000000  # 20 gwei
    return json_call("eth_gasPrice", [])

def eval_startgas(src, dst, value, data, gas_price):
    if use_ether_scan or True:
        return "0x%x" % (4712388 / 2)  # hardcoded max gas
        
    params = { "value" : "0x" + str(value),
               "pasPrice" : gas_price }
    if len(data) > 0:
        params["data"] = "0x" + str(data)
    if len(dst) > 0:
        params["to"] = "0x" + dst
    #           "from" : "0x" + dst }
    # params = { "from" : "0x06f099a7d789f10b0c1c1f069638ba25b2bf8483",
    #           "data" : "123456789" }
    # print str(params)
    return json_call("eth_estimateGas", [params])

def make_transaction(src_priv_key, dst_address, value, data):
    src_address = b2h(utils.privtoaddr(src_priv_key))
    nonce = get_num_transactions(src_address)
    gas_price = get_gas_price_in_wei()
    data_as_string = b2h(data)
    # print len(data_as_string)
    # if len(data) > 0:
    #    data_as_string = "0x" + data_as_string 
    start_gas = eval_startgas(src_address, dst_address, value, data_as_string, gas_price)
    
    nonce = int(nonce, 16)
    gas_price = int(gas_price, 16)
    start_gas = int(start_gas, 16) + 100000
    
    start_gas = 7612288  # // 10
    # start_gas = 5000000    
    
    tx = transactions.Transaction(nonce,
                                   gas_price,
                                   start_gas,
                                   dst_address,
                                   value,
                                   data).sign(src_priv_key)
    
    
                                   
    tx_hex = b2h(rlp.encode(tx))
    tx_hash = b2h(tx.hash)
    print(tx_hex)
    # print str(tx_hash)
    if use_ether_scan:
        params = [{"hex" : "0x" + tx_hex }]
    else:
        params = ["0x" + tx_hex]
    return_value = json_call("eth_sendRawTransaction", params)                       
    if return_value == "0x0000000000000000000000000000000000000000000000000000000000000000":
        print "Transaction failed"
        return return_value
    wait_for_confirmation(tx_hash)
    return return_value        
    
def get_contract_data(contract_name, ctor_args):
    bin_file = open(contract_name + ".bin", "rb")
    bin = h2b(bin_file.read())
    # print bin
    bin_file.close()
    
    abi_file = open(contract_name + ".abi", "r")
    abi = abi_file.read()
    abi_file.close()
    
    translator = ContractTranslator(abi)
    ctor_call = translator.encode_constructor_arguments(ctor_args)
    # print "ctor"
    # print b2h(ctor_call)
    
        
    return (bin + ctor_call, abi)
    
def upload_contract(priv_key, contract_data, value):
    src_address = b2h(utils.privtoaddr(priv_key))
    nonce = get_num_transactions(src_address)
    gas_price = get_gas_price_in_wei()
    start_gas = eval_startgas(src_address, "", value, b2h(contract_data), gas_price)    
    
    contract_hash = b2h(mk_contract_address(src_address, int(nonce, 16))) 
    print "contract hash"
    print contract_hash
    
    nonce = int(nonce, 16)
    # print str(nonce)
    gas_price = int(gas_price, 16)
    start_gas = int(start_gas, 16) + 100000
    print str(start_gas)
    start_gas = 3712288  # 4710388#3000000#4712388 # 5183626 / 2
    
    tx = transactions.contract(nonce, gas_price, start_gas, value, contract_data).sign(priv_key)
                     
    # print contract_data                  
    tx_hex = b2h(rlp.encode(tx))
    tx_hash = b2h(tx.hash)
    print(tx_hex)
    print tx_hash
    
    # print str(tx_hash)
    if use_ether_scan:
        params = [{"hex" : "0x" + tx_hex }]
    else:
        params = ["0x" + tx_hex]
            
    return_value = (json_call("eth_sendRawTransaction", params), contract_hash)
    wait_for_confirmation(tx_hash)
    return return_value        

def call_function(priv_key, value, contract_hash, contract_abi, function_name, args):
    translator = ContractTranslator(contract_abi)
    call = translator.encode_function_call(function_name, args)
    return make_transaction(priv_key, contract_hash, value, call)
    

def call_const_function(priv_key, value, contract_hash, contract_abi, function_name, args):
    src_address = b2h(utils.privtoaddr(priv_key))    
    translator = ContractTranslator(contract_abi)
    call = translator.encode_function_call(function_name, args)  
    nonce = get_num_transactions(src_address)
    gas_price = get_gas_price_in_wei()
    
    start_gas = eval_startgas(src_address, contract_hash, value, b2h(call), gas_price)    
    nonce = int(nonce, 16)
    gas_price = int(gas_price, 16)
    start_gas = int(start_gas, 16) + 100000
    start_gas = 7612288 

    
    params = { "from" : "0x" + src_address,
               "to"   : "0x" + contract_hash,
               "gas"  : "0x" + "%x" % start_gas,
               "gasPrice" : "0x" + "%x" % gas_price,
               "value" : "0x" + str(value),
               "data" : "0x" + b2h(call) }
    
    return_value = json_call("eth_call", [params])
    print return_value
    return_value = h2b(return_value[2:])  # remove 0x
    return translator.decode(function_name, return_value)



def make_new_filter(contract_address, topic):
    params = { "fromBlock" : "0x1",
               "address": "0x" + contract_address,
               "topics" : [topic] }
    filter_id = json_call("eth_newFilter", [params])
    # filter_id = "0x0"
    print filter_id
    params = filter_id
    print json_call("eth_getFilterLogs", [params])

def wait_for_confirmation(tx_hash):
    return
    params = None
    if use_ether_scan:
        params = { "txhash" : "0x" + tx_hash }
    else:
        params = "0x" + tx_hash
    round = 0
    while(True):
        print "waiting for confirmation round " + str(round)
        round += 1 
        result = json_call("eth_getTransactionReceipt", [params])
        # print result
        if result is None:
            if(global_wait_for_confirm):
                time.sleep(10)
                continue
            else:
                time.sleep(1)
                return                
        # print str(result["blockHash"])
        if not(result["blockHash"] is None):
            return result
        time.sleep(10)
        
        
    
################################################################################

def augmented_node(left_child_int, right_child_int, min_timestamp_int, max_timestamp_int):
    left_child_hex = ("%0.32x" % left_child_int).zfill(64)
    right_child_hex = ("%0.32x" % right_child_int).zfill(64)
    children_hex = left_child_hex + right_child_hex  
    hash_int = int(b2h(utils.sha3(h2b(children_hex))), 16) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    
    node_hex = ("%0.16x" % hash_int).zfill(32) + ("%0.4x" % max_timestamp_int).zfill(8) + ("%0.4x" % min_timestamp_int).zfill(8)
        
    node_int = int(node_hex, 16)
    
    return node_int  
    
def augmented_leaf(block_header_hex, timestamp_int):
    block_header_int = int(b2h(utils.sha3(h2b(block_header_hex))), 16)
    return augmented_node(block_header_int, block_header_int, timestamp_int, timestamp_int)
         
# build branch 000...0000         
def augmented_branch_zero(block_header_hex, timestamp_int, height):
    branch = []
    sybil = []
    leaf = augmented_leaf(block_header_hex, timestamp_int)
    branch.append(leaf)
    last_in_branch = leaf
    dummy_sybil = int("ff" * 32, 16)
    for i in range(height):
        node = augmented_node(last_in_branch, dummy_sybil, timestamp_int, 0xffffffff)
        branch.append(node)
        sybil.append(dummy_sybil)
        last_in_branch = node

    branch.reverse()
    sybil.reverse()
    
    return (branch, sybil)
    
################################################################################

def block_branch_zero(coinbase_tx_hex, height):
    branch = []
    sybil = []
    leaf = encoding.double_sha256(h2b(coinbase_tx_hex))
    dummy_sybil = h2b("ab" * 32)
    branch.append(int(b2h(leaf), 16))
    last_node = leaf
    for i in range(height):
        concat_hex = b2h(last_node).zfill(64) + b2h(dummy_sybil)
        node_hex = b2h(encoding.double_sha256(h2b(concat_hex)))
        sybil.append(int(b2h(dummy_sybil), 16))
        branch.append(int(node_hex, 16))
        last_node = h2b(node_hex)

    branch.reverse()
    sybil.reverse()
    
    return (branch, sybil)

def generate_block_header_hex(merkle_root_int, timestamp_int):
    nonce = 0
    merkle_hex = ("%0.32x" % merkle_root_int).zfill(64)
    timestamp_hex = ("%0.4x" % timestamp_int).zfill(8)
    header_hex = "00" * 36 + merkle_hex + timestamp_hex + "00" * 4
    
    while(True):
        nonce_hex = ("%0.4x" % nonce).zfill(8)
        result_header_hex = header_hex + nonce_hex
        sha = int(b2h(encoding.double_sha256(h2b(result_header_hex))), 16)
        if(sha & 0x03 == 0):
            return result_header_hex
        nonce += 1
        
        
    return None
        
################################################################################

def generate_verification_params(aug_height, merkle_height, coinbase_tx_hex_middle, coinbase_tx_hex_end):
    timestamp_int = 1
    coinbase_tx_hex = coinbase_tx_hex_middle + coinbase_tx_hex_end
    (block_merkle_branch, block_sibils) = block_branch_zero(coinbase_tx_hex, merkle_height)
    block_header_hex = generate_block_header_hex(block_merkle_branch[0], timestamp_int)
    (aug_branch, aug_sibils) = augmented_branch_zero(block_header_hex, timestamp_int, aug_height)
    seed = int("ff" * 32, 16)
    timestampIndex = 0
    coinbase_middle = h2b(coinbase_tx_hex_middle)
    
    return [aug_branch, aug_sibils, seed, block_merkle_branch, block_sibils, h2b(block_header_hex), coinbase_middle, timestampIndex]

def prepare_first_run(tx_suf_hex, contract_hash, abi):
    
    global global_wait_for_confirm
    global_origin_value = global_wait_for_confirm 
    length = len(tx_suf_hex) // 2
    # length -= 6400 # already uploaded
    if((length % 3200) > 0):
        raise "Invalid length"
    num_iters = length // 3200
    for i in range(num_iters):
        print "debug_extendCoinbaseTxOutput"
        # global_wait_for_confirm = ((i % 3 ) == 0)
        print call_function(key, 0, contract_hash, abi, "debug_extendCoinbaseTxOutput", [0, 3200])
        print "(" + str(i) + "/" + str(num_iters) + ")"
    global_wait_for_confirm = global_origin_value
        
    print "register"
    print call_function(key, 0, contract_hash, abi, "register", [0xdeadbeef])


def prepare_contract_env(num_shares, aug_merkle, contract_hash, abi):
    print "submitShares"    
    print call_function(key, 0, contract_hash, abi, "submitShares", [aug_merkle, num_shares])         
         

################################################################################

def submit_full_block(coinbase_prefix, merkle_branch, sibil, blockHeader, timestampindex):
    params = [coinbase_prefix, merkle_branch, sibil, blockHeader]
    prev_block = blockHeader
    for index in range(1, 6):
        header_hex = "ff" * 4 + b2h(encoding.double_sha256(prev_block)) + (40 * "ff")
        nonce = 0
        while(True):
            nonce_hex = ("%0.4x" % nonce).zfill(8)
            result_header_hex = header_hex + nonce_hex
            sha = int(b2h(encoding.double_sha256(h2b(result_header_hex))), 16)
            if(sha & 0x03 == 0):
                header_hex = result_header_hex 
                break
            nonce += 1
        header = h2b(header_hex)
        params.append(header)
        prev_block = header
    
    print "submitFullBlock"
    params.append(timestampindex)
    call_function(key, 0, contract_hash, abi, "submitFullBlock", params)    
            
################################################################################            
        
def payment_request():
    print "requestPayment"
    print call_function(key, 0, contract_hash, abi, "requestPayment", [0, 2])
    print "constructCoinbaseTx"        
    print call_function(key, 0, contract_hash, abi, "constructCoinbaseTx", [2])    


################################################################################






################################################################################


if( use_augor or use_ether_scan ):
    key = utils.sha3("Smart Pool2")
else:
    key = h2b("4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d")
address = b2h(utils.privtoaddr(key))


global_wait_for_confirm = True
# ( contract_data, abi ) = get_contract_data( "./DumbPool", [])#,24,5,2016] )


# print address
# global_wait_for_confirm = True
# ( contract_data, abi ) = get_contract_data( "./SmartPool", [])#,24,5,2016] )



(contract_data_ethash, abi_ethash) = get_contract_data("./Ethash", [])  # ,24,5,2016] )

contract_hash_ethash = None
use_augor = False
use_ether_scan = False
#(str, contract_hash_ethash) = upload_contract( key, contract_data_ethash, 0 )
#xsd
#13282552
#12934036
#109 754 100


contract_hash_ethash = "2612af3a521c2df9eaf28422ca335b04adf3ac66"




'''
params = [0xFFFFFFFF, 0xAAAAAAA ]

result = call_const_function(key, 0, contract_hash_ethash, abi_ethash, "h", params)[0]
print "0x%x" % result

 
# 0xad0bfb4b0a66700aeb759d88c315168cc0a11ee99e2a680e548ecf0a464e7daf
print "0x" + b2h( utils.sha3( h2b( "FFFFFFFF0AAAAAAA") ) )

sd

'''



import pickle
#cache_file = open('branches.dat', 'w')
#pickle.dump(branches,cache_file)

cache_file = open('branches.dat', 'r')
branches = pickle.load(cache_file)
cache_file.close()


lkp_data = [114148657133969591545450271717988636480209274784206358563543726318055334518271L, 89795981028699717886903036313496476852375289500458540304356196595220384228288L, 85271898368467201078649075854113535169148563238340278454657274830551855386957L, 76108133355715268787562502188840953643055921927300423802571337019180205929558L, 60274112510035166008835085130162116006929382107897411348016912120796471089543L, 22412701606784419975914469252078867544988637224991331531089096694599067657895L, 16808789258875691673323186658060623702513376767193144761460160675345611641603L, 97296751020650639337757190044598168586317262935957195289428184388604096827471L, 97660754303577170953435426933298517756249199140467776249264762880909840888241L, 115590348191056330971493158646642421463921756338953805017576812870371717000757L, 13431760336535420783937617900755477849640280457000886011262338885610433137531L, 39913017739008302693329735943640516734910356650838775293059711404770907439335L, 104016401869319455212225203504814194124323397778926603615690282533626112489943L, 2908852530079048069798732632010175091316282648346850806004867879766883207688L, 36936811910848314612198012699816993675853179412677161924671528611742131854420L, 114034508725704205262672652643238250589548609582211288503434403239157688010234L, 893222973367000226710573252945292100488077779739417528745194095273798401895L, 18151973558889247442698019277151884835467929831189724374415847444552577357672L, 96423436574124642161189777226365424378294095416752846001233326547373349839157L, 76048828080075247474547282048134948010507778285645394508119204741554425805436L, 78942668118436998425565693259552417525364890490030806328872618497908875449033L, 75094073923611518875124105213017739274643995919545108534211707441035243914514L, 77508918642842180164231329153560397063308855131222751832575365482960292911653L, 62883023256567557092864926015720260285577583824305616765380933960179694906214L, 36936970139836441063768327241566192832608880039780061432973730169473745034606L, 57287191626067322321730694348826645370100392011455583762149768194540633882585L, 50412726532887267822017452821435873385873927015667906361987109755850682533471L, 33201261396710658965268149179978736674387377365017393916440972482964282318472L, 112936223069161951866442960865888720106959055257722783486276340463647295811894L, 80073349145669977174917331014713883909291724338151266583797618085210508292448L, 7039540681745633649737051077754397606736099822461293775161588289188509287510L, 91691974634989943490061269660608072905569624167803811355226438260484143968792L, 109811394119267217980418682274740718315921162906288277475199338896864796475621L, 2169916625310688696815580561532707420113960481448915516189685382525713891542L, 93444220979440752996834207655978258604314592172182666577225871514784804303084L, 3533283653160181957089338727415279788064649803146559006931716142055753879291L, 102301297555017887034795362077436910001908314883103285068381036194573928389492L, 67088065905090399000242543931360421377335187265316763768871574068153824114214L, 42982781986649889219678703285326824960975618228367308581245317440661028896241L, 45197549734260117749723130376419886623679340118608904676357068934986976953354L, 12718343896932466279267455889669174865061178520000094043431403477415864540147L, 64323347692209652594109691526072763515318283361586780764203762315454639109866L, 98555345774378865116031241284283787545444072402127424560908476973774907713719L, 17530819213745874640012224341489590734659625147336138139732906690287218529751L, 109024016515627109531722025045776994036434350299289142674525942407909654498397L, 58174861203071351267785374177322582872178690724493356436334526831734483834452L, 100993805698210330786928018787766313958438069419070933852616453844720718007998L, 37464287748499798294221307526968014733152546443531667637920443694447903043421L, 64561905686840546698362529966417831893354790600948064491039771328422323001727L, 34788824066335772729678427587014726028381032743367828903124750926755505091311L, 104816980388847373255803037350188951065277418409272756832671933610652725264670L, 109679082767584609184054882690271466184877444702435779682215921701561459605657L, 7322094565439717542493926733804325412683748880721476204958879763220735363566L, 92379654531991329115472538265613456938238232665287609563420815884194292170159L, 96862827866419412294499908833905276553570806531916833460289060738174092892477L, 55754640012700596534599628765344848880025713543108735071326757333659106285635L, 57038618062483121191960238544876393933216506176959416160425776323596107644787L, 15173559629001464941378791350131638022426903341421444508665945898581422687724L, 57213135285621967467981458169117951575735796163916872631721132979070757077072L, 91290875124139148512416415497417393766070558307898474724528871239687551332062L, 106359830828928032413935843638308551729943819362270058723615699300530303309674L, 75374382680597074378477378814369977761356584633837955640862543701924967175664L, 14873479996272677766122948750920072658216967224268189684192956751676454583357L, 100905222928408407167425304574514852206485905086111598267343176059672803664443L, 113158284224999060826204833279684966542786511005433460021326361996826700908727L, 5108382308196214124483761680040714153433959143220672494984255596177063808828L, 32333930610258316958061191982573766504572033070685716912716267012152733857419L, 78951792741509277129036752971973541102043724171136331078683068388257047067811L, 85609267365678998402318108830604404572465460706047084929483186693455631640311L, 11033890174892543043139292314014738055307261479764133525352440473432479349225L, 1437172083609984030500944643444131047541505224402849227176393607438369922132L, 97534751253731945273452434654418129994697425807190979518186345914550597543528L, 20677492642702327595779639796217888033743587625881734325350540421934566819068L, 100173112331455364473105706886413043596090885328902311297806939198846996536872L, 22176899526033848049170083223133112985854450197178523946301955872594501969726L, 27287498012940191961571336126347693654598215510530659416160280023728057423053L, 62937346049325649178822977240745759879294553495088120860230495475828475086138L, 27389798429220842235232132385438417575458682573966382311611061876694185090633L, 31977039450635306060300233129948846186594256956799864842144762678516208379727L, 1649508726996237494672660368220716909436167359189705370347904298884722543514L, 36125002832902131416558484908510245022453444333736491690659742201655077451861L, 87441155796457418657199817431269909181137617336258122382853973227289510258128L, 33776737261996831134532952097577312125758243131691315803592133301775897552825L, 37662224512589942899412741317197024882163699063214045040147647366353073504956L, 30954373083390696321259314703246955666730182304267430952789551830011085817389L, 65007435958460963296585735874432632837312070756443460036885182856594483263043L, 93731085366804594423976618339034297947780180872989346250710012520252973257713L, 88625083096410608287684469343822516318999675376400074270901863003746946606262L, 53251994591364894423608668146001811112449617742356343523800133928042099313436L, 89973663007721247861151373966713467099826562336396726009753875781811016602092L, 5750101756596024959039658045169186111384414904371235608066928194324328490059L, 38576804884114956417909658326506825879414886493733829943771450680828434689918L, 111238338639585064633454152205865772079192644611838588444742838932338695296101L, 14503149790669600606481946804137445713270755913570298445146962909465913758078L, 17067068648073288458351247918040561237854043695924601797421663828286257767067L, 10042050469035613470661828284564315545712548480062092970691140563909435985484L, 20234511596233078178645616796178580887735080802173224323429991361408880123848L, 69086930721510030162570314301229025822909383775236917639775810050455047060337L, 33593460358028592394894249622861770421649395111443311465318944373786716922797L, 32066072578538643193262430221326240923753456451821167765453293472201154119862L, 67256347068971755116107640342015774544516093247448618611663494775969359550125L, 60985781799956559995688404509754884398362051909792537819794427103774364233016L, 50270915507905426717620767258058536375083467887358577578592486821343282472028L, 22573810737755091270148265207054731920234011175417451203902100170737157697222L, 83596930187791311663283729750619979910928173374545111023315896996372396462904L, 43320282129276639210170646551121080234224173386397917380121794845154048268437L, 10957114886360076177654934231911628626977406503486688319220423029150751182526L, 94940474387295349035278852856134240036839170136010864347817582396970370168113L, 10179759782611563261555367892989799375381345406462535677576295306990491473244L, 94081070054034701766261467191014274156572416269634820788910324232118386039713L, 92092126822967784624286877813993839781636704213517617152064894172087853486709L, 60125494505947311887403694599790017763031622008109431915731418938421787648433L, 104058434555035617599800629057573724752767425508257674381464344526980331970287L, 64383893387121206421388699332956667951595659751917404410312957415264803300275L, 66892020599763872915656866158495593063324577751639227671955830777073828670663L, 45198652842354997012153467435146642999397041884244186968333585641014852166707L, 114153207083064660676084807038479358056252577292604121889100693480102328148103L, 105834993008007689965435812402714039090141880743872809237229840937046385423313L, 107534228888554845419113900759410310459097827935967960566651912323629410642826L, 35273432181705960540841010728300501859785694700074132711987181445129965633393L, 77167840890745002242305704602392484946492502155996089242174712109733978840787L, 20458125684864567035909361205108495331894986045101428482983075189575408394335L, 25548280034872374149331243134845442174473573803223584843599113280558628916766L, 110141056106905110092798815627653717601532532448814134912736250115864938941019L, 14276181134110351261427378948345216810862342769119090465094257862574001011891L, 86010123389916726343234900444562852041420475528969270154667609560864547828485L, 86182103991735782615338703499027318499506010377771067800575089109064219478741L, 83993998373762025450847993418463164855619876633331735266872409369959656999172L, 83237661709912748870764794105738078598886055088550437678983500904216399920757L, 99346654905399202279631094822071497078656835499261470745123884835617320657851L, 21677913183180344830670408870714555832014955279443643213294264490134319221867L, 68487112197084295103571681734856891884718240810292151548005244602711015508262L, 57159465303356094324511170021955826072295239872858174045481879293743169080417L, 37799644097051723833290292217005644587583509420398343186504081596267144715262L, 112555067378866740974927063965950131277201507574144790283401752230368479320837L, 70233523041925088860908333612887485597961111693638464007897792957072283063729L, 93401857907313663757844262478661998962091503071647021120567076878499163635955L, 48494996464903572076646871511160080311769291480950765375324449561226620588363L, 109892068255940796756988363262649613690658242502502009252904822744134475121708L, 100393744517698930161048715349756529923936182836246598845377286153004329674162L, 6729686265453702199902798942264808301641956066623668440135240854682568870793L, 29041626127416574260767492877522106063305470398988765133590963800991905443091L, 58000146200353933795124396945666556889376921488554915027986031792353358664101L, 12551845308093051231454331217383135169322006736693288661129924675794486341371L, 44750486358081414667416590533337145262026826857902042362781071084880252912659L, 28646493687925097317621383788765690141349967413322438374930753134731341151081L, 4720726394887505863031377581382143474559400997891249498669260620942101543637L, 86533502302242561207662242494822158653535354225851934089604255798047031620746L, 17773291746229602041816634001103541019553330461587504833630829513678377212829L, 31911230084697939007209544574930591485115370595950318979218455534558294337088L, 47811720428877100291097366146361267159194447226581251405211210571744842715441L, 43907262707713566691646226453669215346813394612806424398647435261425065915758L, 99118187840002555629341786811268222412302172249715361631138260504148911962618L, 106499165838097244392905965366064433123545535502499066548002060148542370235903L, 78728972172506104732697935186689027563130611710129042315116378285676660590419L, 10452806886257338644269480431020323750324926459254972191280711798700434606714L, 47841616978827764657096761893632112506193457815551559884326951422486465579612L, 18900730118140962881889793143005152158103593971413443975537320223061565294124L, 4881011898582108109198008112382468951711081129804592495145431930960653348743L, 58598463664102644130419338986114297715000378805874136123583700498268031862262L, 43034089263431619460413279586309719032841668147280329152724032084620578345895L, 94373286564555245855325235576643496828576015638810667120189904821269734978781L, 53717741601495875140520205815677536619174186512342399261658098985833574277521L, 110822362136220636182110670042237942310823714688622693809308475667805954646697L, 89364584809154938147683481720071410423018835124577598499939985126573366998819L, 59339334795077184072675594203512837767397756614963336925270564954575997615341L, 42624766646305603712587272642892780866604441052284219427615560485380156110642L, 13134480057861385553582937705009326700869184169290833391817127957715053130543L, 93427872147250076826205139790412406501772893913613775493759089169115073267281L, 93361365292581954214858538106138515168136792274482401284537116949802299592880L, 32390306035602247931396284676841311001080981617487220001569426448111631472209L, 103275544573020433639179207314969499137554693054876424572035638693146779956867L, 88056748692845516250094428482867388017501502616997997576268819719364014134498L, 53286009634053382861434361173186253043542922512857958344681713967680201071347L, 101171923806486852501064890664476742474879691319872342238142966308648360215627L, 90052400506088722045362512051320579127365704096605540792515263988175964867354L, 112635611920843423337588918168134783469630325648850135408385734170881446666199L, 27104412335585634028306011238584255072470688433349332548945592155276512887022L, 93972851504433714311180274497908279964827945942713448626114595698253772392508L, 90131116108201009199451996060452555272043647164798593556252889045588253674673L, 68411027384027317307785351571549055163370312481302523855953537412163030505742L, 8057384941315217723926315806979741308883487358736657829119231914560706143328L, 36364565006264801037720723114598863925641574218212654801625795286758927867031L, 52712570978304051133820635794748154543288634104243755540415061363088551802980L, 42512742463110375931679421550835923422492934485837217337620295348431397537486L, 69971141244603693601752343771852293530718602251649542489318723148230829250735L, 114056710204072945538209883190866342117441270124639955002226621328010744640370L, 94454151924390293635957600205580672269897276031345968508550394796540084408225L, 94113106728997963834713653103670139176397563305207985288140905726849817165288L, 25363167029757669167150723450234207211942845699820323828116471733295461397306L, 20451153921782914545159922286589078919870183990016683561424046797934942388122L, 40103876117470089138472805924860274644251168863866568372375836666437024610557L, 86921033640712983305638833301147426021369414575793603831565197815914992810232L, 58829461551551314638181580511123374905331670624313614293717232342714165149400L, 10744826086000031908061364180157863800829797322862578550919203286557601386036L, 73854893538889457257972630205984031776088155375453975255439924189490888997924L, 16714046169553110135311887139140166601320342618579276431158558218130364956458L, 62054805548764220995826631042279484976435566019812124988690799098649728616699L, 33182653002857253116172368454902298494235380960184458720434322186989469324469L, 16762950227518522637940088818072718683814861942088642262725450264119701116114L, 114587469196935625785471290540818427403511311941465199908124212865780254668048L, 62434979878929842139710848677214071654286973243632251275440311523614925271931L, 10261111719323685548004051755051998932280690734437997152490563505211564658913L, 108316476149378918920468976238821400255681747081964275687694099930244972286007L, 37618066045103917036773578048153408340115689245528240345919376308371583967577L, 69801857557635636765378197637711984943411251163581358900933611676801629340818L, 8937866643451553405923706455920705244023437812377571222959282437651896405166L, 38628999484038481608231687542195667119739166546453254947600706486091319314193L, 112208372827742393414436012193196966130340649642583573890319234173481995195591L, 91223961031272236216471879445462311004676639228131822231478124245348571077327L, 83855379548389767136728569764484228096056610842599908478193641621111400149533L, 48060552078379465930986172197157526908784172714174714688146846167504975523208L, 66840139511155644678142338504080045920117901753988939068265611291299662204090L, 74916459562152321261322614993377075354122256370811119475343755635749212902830L, 72918796039845552461708879734635922455354700915042115421067965246760190113096L, 106894041062609856771701851082665586624475747312931885187283731819906010169363L, 6678104430911577635563505331297283230703327518875329540126349042278496286538L, 113673128671821767125342758365172666492480344869356535406472677832611144386992L, 7924717463009594985498361355832758187447219269951475815810695665284948998757L, 115545068334434635375668843726747579616287159776646183715070937888003042642606L, 34512181188458552450376556330021810253625207463598458158396222080213591185129L, 3624094830729719744310104251193117830487486746972538555292221611699554098788L, 85616758849037279078776719281051294158334953789004714878329936960694985158082L, 7989289121301824513628103759921128642954564703667782809660664753524723502435L, 112934498506865948517496083828556185545007577761541054574497488225430559920335L, 29758934693688415228940430408093962852865266161511677887795279050201921922289L, 101618795501322199602488993839653726065566001028210904097622395297601482743439L, 66249705464160489037040923522012993325632286826036484010893379927809316068018L, 32780539808507285608934760449396734169128177785605987946105648239192405502685L, 17879362314837593156127097271142610473400052586794087774504626995909687389399L, 30143211664205658864752956128419366285529361295807620226050574875807361038306L, 89730678036646378457743118540915027157283213915882502172392101556823145489688L, 78778742020664217267163910846146977931673717384962101209770361293843290681481L, 25726464642674563845081213588536949921796067009589920277091016962897930406385L, 108557178155497557031971598589894467400693576663332027898307508477589209980608L, 76360214116203465904710842324805900906799807984432161729408288723799815859661L, 67012207712673147656315222989171606345909807615496936462197000351019103405163L, 45194911758400197518064650345031881760447190503618643674807979995838018187632L, 27889510259772822932977058369851155857898937274716028768960479584171659006830L, 51797126735618435364275031373083005227973800759836690929107811530009545682643L, 65282826597826950418155338107359009210149607431309283360730547978769435029351L, 5859085127075048625468988437381817856786711073368656363734084523635431886126L, 109012258910166698796196321437547058863456489611845363839302111417021837958618L, 51485311813002397555537488342092572598222871302272987379819309614802173278344L, 103381860266426755690973908581460162828276907277317849227752838259989547997401L, 113212036899865670179122752153499916159299874110536667464025827505047612957695L, 45087325853532396473472715105456317760169651973815681022363499404131393228416L, 101509253710419067420579308226107206513191022250188102242074739878854843593540L, 67220601492241989473036312895725833095562993805588163882933975913046127852390L, 41597421704556842386566243181124420815770206034983336591938577928290664805786L, 90155697631098609127307805693561744572083544909536507257637243553176273032237L, 106025243457150304723994602843285948000802803881547006599371568493245863746327L, 46633561633538934645762424760156532483982243288728269171389585022216603994874L, 105051759137384756535311722461508140029419737039245267544902054886627602014708L, 14699991384217898623619496595364838828930268172517199932768423828829314013101L, 68853715358679554974067969953749665066387871641434314951025388861150677921340L]

'''
result = call_const_function(key, 0, contract_hash_ethash, abi_ethash, "computeLeaf", [lkp_data,0])
for i in range(len(result)):
    print "0x%x" % result[i]
'''


#lkp_data =[47040513009396197917189080783353316816333840145383811682281982885871757082285L, 86986480161855546653289332391679433115208437753826260349001528028813748430765L, 70505733545672215479666496019724876987245594489093121721964946905223446332055L, 111131559256724885490570537553546953756217607866430741106719861430025079439227L, 70505733545672215479666496019724876987245594489093121721964946905223446332055L, 111131559256724885490570537553546953756217607866430741106719861430025079439227L, 90652178667346489602169224938420366772913590981877643772235586252680175153976L, 109125439807104380717512865604460068441705330632453519952206647895821660535683L, 90652178667346489602169224938420366772913590981877643772235586252680175153976L, 109125439807104380717512865604460068441705330632453519952206647895821660535683L, 106093007645343250924327156715909351561611968074430522790074647062153210271282L, 113615776060866059036484370565518098804060009768833702038815109921212717587649L, 106093007645343250924327156715909351561611968074430522790074647062153210271282L, 113615776060866059036484370565518098804060009768833702038815109921212717587649L, 94351343127785004774361879005391262576349045509658574623971890155366762259990L, 93582170248110075811076419323318677206504411600095212074983422321247812286159L, 94351343127785004774361879005391262576349045509658574623971890155366762259990L, 93582170248110075811076419323318677206504411600095212074983422321247812286159L, 86870223088779383399950574558944990832916530629898066387054642283082580109967L, 6935988174889442287638685555377744316320118429536355339212006700793108136654L, 86870223088779383399950574558944990832916530629898066387054642283082580109967L, 6935988174889442287638685555377744316320118429536355339212006700793108136654L, 35135651094207051091458691327511825214636047480288140620697772965438982115137L, 81498698730631604412111861035267356526505161142752791526242245242141298887839L, 35135651094207051091458691327511825214636047480288140620697772965438982115137L, 81498698730631604412111861035267356526505161142752791526242245242141298887839L, 60465149907162042801866134615518672855447104838536197584584133648297382668401L, 113306245480917783449447583243272624073152957472908389968100872394117664704046L, 60465149907162042801866134615518672855447104838536197584584133648297382668401L, 113306245480917783449447583243272624073152957472908389968100872394117664704046L, 101918460766723705636089623865683432405460589843301599592154714139381057275489L, 37429358102154579247539325203271385789234528551427249009622942334026566524432L, 101918460766723705636089623865683432405460589843301599592154714139381057275489L, 37429358102154579247539325203271385789234528551427249009622942334026566524432L, 113045020918386086587940233876561476939555406162997649721506864996453636866227L, 71443553641199335238524643684304701129148094726875348895394664982330559267882L, 113045020918386086587940233876561476939555406162997649721506864996453636866227L, 71443553641199335238524643684304701129148094726875348895394664982330559267882L, 45945396834975865296721069959858720066980431507594137808733486766566168398528L, 48758650053286430376357180678392646638050100028250706601527273855954972086136L, 45945396834975865296721069959858720066980431507594137808733486766566168398528L, 48758650053286430376357180678392646638050100028250706601527273855954972086136L, 71860034137683756786883444670096153622683398555601224099494744897227239454835L, 106799136935360820680806819837070078363551966290682406627603194841062751969184L, 71860034137683756786883444670096153622683398555601224099494744897227239454835L, 106799136935360820680806819837070078363551966290682406627603194841062751969184L, 7668550003181723927320073801192214105192723143751859724853534014785210650363L, 74834374474151947821510532169461475299048229831187213399971834490792880907255L, 7668550003181723927320073801192214105192723143751859724853534014785210650363L, 74834374474151947821510532169461475299048229831187213399971834490792880907255L, 43723893723980786970083227914450069163984324191117426442421925394788046051414L, 5330636098618925261236693542610237749803740230330676031907763245248139551601L, 43723893723980786970083227914450069163984324191117426442421925394788046051414L, 5330636098618925261236693542610237749803740230330676031907763245248139551601L, 46765787419160461040210083716293521562666840992159644209656045495888394613993L, 42708611715090574513844192936182623409144702417723027565578789541502016434151L, 46765787419160461040210083716293521562666840992159644209656045495888394613993L, 42708611715090574513844192936182623409144702417723027565578789541502016434151L, 28338378324731609650595697601490247260531210945943683549665193176156582725885L, 12900379499125053881009210007866224646884237461630005588908832062416483971612L, 28338378324731609650595697601490247260531210945943683549665193176156582725885L, 12900379499125053881009210007866224646884237461630005588908832062416483971612L, 21764139921643279215830031614116091067955598455574945586740614736526905422367L, 80617642893995587410402721239696679903341351511014197203486664847157630754889L, 21764139921643279215830031614116091067955598455574945586740614736526905422367L, 80617642893995587410402721239696679903341351511014197203486664847157630754889L, 979428994715291923712392895147587391868856858346179300366280655303421908733L, 79707651735085887254106399476775483478201638298636195228356522911969914045359L, 979428994715291923712392895147587391868856858346179300366280655303421908733L, 79707651735085887254106399476775483478201638298636195228356522911969914045359L, 43791696186014313394381828095908786372879628154882695333065889152040017571944L, 49855077792701886334702125646361195736594863866692112516866326629087934679564L, 43791696186014313394381828095908786372879628154882695333065889152040017571944L, 49855077792701886334702125646361195736594863866692112516866326629087934679564L, 10332022711660159828329508942652591008239189302568469692027833706646246590544L, 37798938524998543440741904948821764267930771319977008322201208338799130340755L, 10332022711660159828329508942652591008239189302568469692027833706646246590544L, 37798938524998543440741904948821764267930771319977008322201208338799130340755L, 67931796854845169945362190192698156376994061093253991989329299450200683699174L, 76303777732750485337247729476690255066270052103862929216843996788012779864987L, 67931796854845169945362190192698156376994061093253991989329299450200683699174L, 76303777732750485337247729476690255066270052103862929216843996788012779864987L, 49535955871668424225093394925834400452569149725083231446103447633407297970809L, 8010165360000162492612620774636415174805355990424890833553167715537995716230L, 49535955871668424225093394925834400452569149725083231446103447633407297970809L, 8010165360000162492612620774636415174805355990424890833553167715537995716230L, 96170320859007651249426536930370678265725183043456439368089786089037798455932L, 5090567917269834313977964477426941485233556016981818457400730314794039179984L, 96170320859007651249426536930370678265725183043456439368089786089037798455932L, 5090567917269834313977964477426941485233556016981818457400730314794039179984L, 91357170848592699486592158461290713195581771004970381466317090360949796177983L, 11827328451848763392316423207835303489052710064012920807732153270948375914347L, 91357170848592699486592158461290713195581771004970381466317090360949796177983L, 11827328451848763392316423207835303489052710064012920807732153270948375914347L, 110123663292196115757404716363465564587244835087894072379699923919822098660524L, 59408800737315371673500905532951189974419368146899861898947671460682303371992L, 110123663292196115757404716363465564587244835087894072379699923919822098660524L, 59408800737315371673500905532951189974419368146899861898947671460682303371992L, 20748500967245416221092185927048142669463223549016166690203661960906640387420L, 107646759198324533525860975291414663901731028153626521881539269125755535089376L, 20748500967245416221092185927048142669463223549016166690203661960906640387420L, 107646759198324533525860975291414663901731028153626521881539269125755535089376L, 80931377296430957817868911981574421899473627979420758744460572612068284773272L, 81454231095933386839176983712329796802030179634261032070139605729977585508005L, 80931377296430957817868911981574421899473627979420758744460572612068284773272L, 81454231095933386839176983712329796802030179634261032070139605729977585508005L, 99520210447090273703186030410910563491152308532847161713977170065093891183325L, 96500355886780817132909216250426885330055877916707177522839132616151026536605L, 99520210447090273703186030410910563491152308532847161713977170065093891183325L, 96500355886780817132909216250426885330055877916707177522839132616151026536605L, 43265253842164824514667882490368653522836872934481254868728918448367830340791L, 16174187738617924997655172981437292103412798974598215111737129309027265668026L, 43265253842164824514667882490368653522836872934481254868728918448367830340791L, 16174187738617924997655172981437292103412798974598215111737129309027265668026L, 28648492754808969353052429352146462845214923640003155602390036129873923471889L, 111072140602470443774891913778755931079836011881575506088320705475120481831321L, 28648492754808969353052429352146462845214923640003155602390036129873923471889L, 111072140602470443774891913778755931079836011881575506088320705475120481831321L, 57170614219809657375182766823240614789927816763107042750503697082587380729990L, 65126149226671535550331962472466498617734871638811314494924512497475680363444L, 57170614219809657375182766823240614789927816763107042750503697082587380729990L, 65126149226671535550331962472466498617734871638811314494924512497475680363444L, 5644806042122888217755934906645166366454675417402583671658501392696400981775L, 103840216788829395862553237833046387260200377537556691447358572670662502773503L, 5644806042122888217755934906645166366454675417402583671658501392696400981775L, 103840216788829395862553237833046387260200377537556691447358572670662502773503L, 13880430314567913320823486202672597046897130309615008168472839861769194328770L, 50900750339055919919690568086386890577088906160455569401915057234680391485528L, 13880430314567913320823486202672597046897130309615008168472839861769194328770L, 50900750339055919919690568086386890577088906160455569401915057234680391485528L, 58670596317024350793568230249809665017618115541686013974314129820871631485408L, 34601126078712935483147892805840306229438922487081259924926944046261718653025L, 58670596317024350793568230249809665017618115541686013974314129820871631485408L, 34601126078712935483147892805840306229438922487081259924926944046261718653025L, 53658842610310509405981001380838432625701614475762727517448720088727477416368L, 12868687174548130050397083995200162018815194370853702607845367453796995743470L, 53658842610310509405981001380838432625701614475762727517448720088727477416368L, 12868687174548130050397083995200162018815194370853702607845367453796995743470L, 33324141962794166320476752104137071143861697384891436615202902774750250310655L, 47642946701609761346740310030258453084021521303851329762632236409439853409629L, 33324141962794166320476752104137071143861697384891436615202902774750250310655L, 47642946701609761346740310030258453084021521303851329762632236409439853409629L, 2891793191396612579701133619068503350455165837505641888586348419455790222821L, 49544645330096409953292562461812566301833222060585423766980185577257450717115L, 2891793191396612579701133619068503350455165837505641888586348419455790222821L, 49544645330096409953292562461812566301833222060585423766980185577257450717115L, 78194207617551127782836024976341123700912513342022775580516009236371779715392L, 59527698543488345843383059391807489092325167661366260190935338581156091754492L, 78194207617551127782836024976341123700912513342022775580516009236371779715392L, 59527698543488345843383059391807489092325167661366260190935338581156091754492L, 3278637573064342590850082125360186083577589266863976040719302743189223926695L, 42210044168303657466141942192816703688878077894928714606599671954377270620088L, 3278637573064342590850082125360186083577589266863976040719302743189223926695L, 42210044168303657466141942192816703688878077894928714606599671954377270620088L, 38375792630635045231480407700278433735307596474566490072513263261118810834340L, 8051064170093290735207384359180891223809143631738375047719932746257487192369L, 38375792630635045231480407700278433735307596474566490072513263261118810834340L, 8051064170093290735207384359180891223809143631738375047719932746257487192369L, 29892597386562915876811527087643463118420919110294525062359337612507956944991L, 25367077527976414649324226973025622874299145541900544029190777634020856715667L, 29892597386562915876811527087643463118420919110294525062359337612507956944991L, 25367077527976414649324226973025622874299145541900544029190777634020856715667L, 16897203689268888615683452202143314763604426225972906343030509109169132068203L, 22768946093819504220202769775251945337404611057015086548171820246765912925048L, 16897203689268888615683452202143314763604426225972906343030509109169132068203L, 22768946093819504220202769775251945337404611057015086548171820246765912925048L, 37138102448259802393325981894767227807090664427682033585122435605193395148674L, 64925011102508243436667118022033938328805913806528876165304266504803124164517L, 37138102448259802393325981894767227807090664427682033585122435605193395148674L, 64925011102508243436667118022033938328805913806528876165304266504803124164517L, 92581916484839618648708794763619393582764569702335728492259157686940789338122L, 51837323250171819101150210087326491772552498886485047636302420354572538232476L, 92581916484839618648708794763619393582764569702335728492259157686940789338122L, 51837323250171819101150210087326491772552498886485047636302420354572538232476L, 44156303754340078479425602125881479953487953233066413901272313144200270220952L, 42511566251777559724220867350438159247055127887988548204594513077748411261726L, 44156303754340078479425602125881479953487953233066413901272313144200270220952L, 42511566251777559724220867350438159247055127887988548204594513077748411261726L, 89736615874709848113814435561671083404108623883239104820477507474890905229412L, 97418370847234916312486334822927203202612012473436319779587438406590080114155L, 89736615874709848113814435561671083404108623883239104820477507474890905229412L, 97418370847234916312486334822927203202612012473436319779587438406590080114155L, 34898236729936138738784881151631395031020827933764321413280205014454525490139L, 80902212060369030522282405822062650504079330587678176311926614319304855532597L, 34898236729936138738784881151631395031020827933764321413280205014454525490139L, 80902212060369030522282405822062650504079330587678176311926614319304855532597L, 30351465840034711987001256555408654916636206795178185420961156153724949108460L, 25325157739632770036046732105113225965366798591692279365799629688333505987700L, 30351465840034711987001256555408654916636206795178185420961156153724949108460L, 25325157739632770036046732105113225965366798591692279365799629688333505987700L, 65067353207872399017068338797062964051629086391270334918845560358306455967371L, 47218638171599583617719544233308919378140408921709457069235531056599298504197L, 65067353207872399017068338797062964051629086391270334918845560358306455967371L, 47218638171599583617719544233308919378140408921709457069235531056599298504197L, 67841504696779545937469756102540661379141160685184660400287370573437485890432L, 4293487937021579547393248480910081193486087241959373560411325227920572349087L, 67841504696779545937469756102540661379141160685184660400287370573437485890432L, 4293487937021579547393248480910081193486087241959373560411325227920572349087L, 93057817167372370903605528591446336432155422417575238805921881233550975590718L, 24989020083230216232956975939321722332276938328063813345631658025285332674217L, 93057817167372370903605528591446336432155422417575238805921881233550975590718L, 24989020083230216232956975939321722332276938328063813345631658025285332674217L, 83390350766680230231860505867376300746840339844522120786906350442533101437367L, 29786413948576660451591111037948977040917672360024692613212174846095327108133L, 83390350766680230231860505867376300746840339844522120786906350442533101437367L, 29786413948576660451591111037948977040917672360024692613212174846095327108133L, 27160921197065321939650193481647295562572309584962450052841602682953608522793L, 53876011479534851234641717656119195726745484550411301121816960987463855186154L, 27160921197065321939650193481647295562572309584962450052841602682953608522793L, 53876011479534851234641717656119195726745484550411301121816960987463855186154L, 22079682288235809050833979189182049302665453868336886994928514680583664479237L, 8558888777363479979697963727824827150978995145048728388801152889902870183549L, 22079682288235809050833979189182049302665453868336886994928514680583664479237L, 8558888777363479979697963727824827150978995145048728388801152889902870183549L, 51949368404328006793053250901023737134846262405631401164510390119939835895428L, 105928128526714350329522400253946441575209574574236953380076433751558159242310L, 51949368404328006793053250901023737134846262405631401164510390119939835895428L, 105928128526714350329522400253946441575209574574236953380076433751558159242310L, 113662624045273640470753640195924068885799390841233095137137594136345304624360L, 106830318121287416160210478404856117312332676175274368763942466549839085448035L, 113662624045273640470753640195924068885799390841233095137137594136345304624360L, 106830318121287416160210478404856117312332676175274368763942466549839085448035L, 68388353906282074390733982750542286758394684245174878484017729693322166162476L, 77603280268847955895498919045068980564480185997750098976317404238579790831520L, 68388353906282074390733982750542286758394684245174878484017729693322166162476L, 77603280268847955895498919045068980564480185997750098976317404238579790831520L, 71784227081010958940976092082126709805510488496423050440587218493397318871513L, 15041060387574737431144747582304798774618580081009825850676774726144698722456L, 71784227081010958940976092082126709805510488496423050440587218493397318871513L, 15041060387574737431144747582304798774618580081009825850676774726144698722456L, 12192547577518313907629888272374111678762617981831629774967796474379370616807L, 17292023118689726732860317510590595972146084385642067600642752518793735033137L, 12192547577518313907629888272374111678762617981831629774967796474379370616807L, 17292023118689726732860317510590595972146084385642067600642752518793735033137L, 33364630922276889649391042348679526375818943904044411413706449111600879746813L, 80431757016752764943321009190462402535598501288246031868949053803451373628391L, 33364630922276889649391042348679526375818943904044411413706449111600879746813L, 80431757016752764943321009190462402535598501288246031868949053803451373628391L, 93634424016615827977404205184197371304425460973129659511366129733175378533544L, 69172667809302030689542539398278391641482457287896114114976518041920752081887L, 93634424016615827977404205184197371304425460973129659511366129733175378533544L, 69172667809302030689542539398278391641482457287896114114976518041920752081887L, 97581925477603343867381955044679512289417056166812051905274556204641722120730L, 3479073881656883546075807693057840043175229717307902830514755646880121396973L, 97581925477603343867381955044679512289417056166812051905274556204641722120730L, 3479073881656883546075807693057840043175229717307902830514755646880121396973L, 99855124732808845271667950444410313993887470004920946246616762114956656997359L, 86251879578313406649706113486870477223797344767488176858993388922960116940609L, 99855124732808845271667950444410313993887470004920946246616762114956656997359L, 86251879578313406649706113486870477223797344767488176858993388922960116940609L, 11416554918087016838565925477155137477665426878792776673607398902194671114167L, 26141325658515193187465910235050373108141310125891659724370881599151102885662L, 11416554918087016838565925477155137477665426878792776673607398902194671114167L, 26141325658515193187465910235050373108141310125891659724370881599151102885662L, 75821939926396258787552054740205961991738958604793117721413023963256361387691L, 46835045457195512269947613362489887764161289992165765757604024708461526135837L]

#ff9d26cf1ee71eb8cf4cf16626b05b0d1244692c598b47d254a51d57b3d95dfcc0a39a8492d7b9c4cd14efd1ec6eb5f2c3d4e88c9e63dbe36cd6fa6263b986c64dd127265ee2ec109829d81dd224287a998896ed64dfbc448d235317232f86bc56f4f61aef5f7ede8a876f20f2f76c062a78466cf3e3cacd14f0839a4bad43a8

cache0 = h2b("%064x" % lkp_data[0])#[::-1]
cache1 = h2b("%064x" % lkp_data[1])#[::-1]
cache2 = h2b("%064x" % lkp_data[2])#[::-1]
cache3 = h2b("%064x" % lkp_data[3])#[::-1]


'''
print b2h(cache0+cache1+cache2+cache3)


print "leaf"
leaf = (utils.sha3(cache0+cache1+cache2+cache3))
print b2h(leaf)


for i in range(len(branches)):
    branches[i] = h2b(branches[i])
    
p = 13282552
left = None
right = None
for depth in range(24):
    node = (branches[depth])
    if (p & 0x1 == 0):
        left = leaf
        right = node
    else:
        left = node
        right = leaf
    leaf = utils.sha3(left + right)
    p = p // 2
print b2h(leaf)
'''    
        
            







for i in range(len(branches)):
    branches[i] = int(branches[i], 16)
    


    

#e5f2eaabb3843d3d8cd9aeab4b8d6db4cda2714d5ead67f1d0d8835cf6995780


header = h2b("100cbec5e5ef82991290d0d93d758f19082e71f234cf479192a8b94df6da6bfe")[::-1]
nonceLe = h2b("307692cf71b12f6d")#[::-1]

header_int = int(b2h(header),16)
nonce_int = int(b2h(nonceLe),16)

print str(4*len(branches) / len(lkp_data))

full_size = 13631477 
params = [header,nonceLe,full_size,lkp_data,branches,24]
print len(params[4])

#use_ether_scan = True
#call_function(key, 0, contract_hash_ethash, abi_ethash, "hashimoto", params)
#sd
# use_augor = True

'''
result = call_const_function(key, 0, contract_hash_ethash, abi_ethash, "computeS", [header_int,nonce_int])[0]
for i in range(len(result)):
    print "0x%x" % result[i]


ds

result = call_const_function(key, 0, contract_hash_ethash, abi_ethash, "computeCacheRootInefficiently", [13282552,0,lkp_data,branches,24])
for i in range(len(result)):
    print "0x%x" % result[i]
'''


test = h2b("00" * 32)
print "00" * 32
print b2h(utils.sha3(test))
result = call_const_function(key, 0, contract_hash_ethash, abi_ethash, "halfsha3", [test])[0]
print "%x" % result[0]
print "%x" % result[1]
#sd

s1 = 16 * "00" + "%x" % left[0]
s2 = 16 * "00" + "%x" % right[1]
print b2h(utils.sha3(h2b(s1)+h2b(s2)))
df


result = call_const_function(key, 0, contract_hash_ethash, abi_ethash, "shanumbers", [result[0],result[1]])[0]
print "%x" % result

print b2h(utils.sha3(test))
sd


print str(params[2])
result = call_function(key, 0, contract_hash_ethash, abi_ethash, "hashimoto", params)[0]
for i in range(len(result)):
    print "0x%x" % result[i]

#1f2c31d8b8b88d9590f4fad7c0aebeb5fa5a443dad97c2c3e8e81e28593942a3
sd
'''
bc47a7b6
3a400c37
adb9c558
e572c9d
2b0ed9be
4eb2679a
2d4cb7b4
6992915f
55ef0ed
fbdb5a67
f6cbec54
40794223
d0533e6c
5cee2cdf
616cc055
d54458d2
bc47a7b6
3a400c37
adb9c558
e572c9d
2b0ed9be
4eb2679a
2d4cb7b4
6992915f
55ef0ed
fbdb5a67
f6cbec54
40794223
d0533e6c
5cee2cdf
616cc055
d54458d2
'''
#sdf

'''
0x35ceec90
0xefa1019c
0x189199f3
0xbdba9887
0x20ac0641
0x215b1c9f
0x3505329c
0xf0e0458b
'''













'''
0xa706a38f
0xc9a4bb13
0x234d12e7
0xceea4732
0x1413ed2e
0x227a8e41
0x5c75c86a
0x49200e8c
0x1cc893d1
0xf76a4808
0xea1eb36c
0x126ed010
0xb3b5d1b4
0xe47a6f89
0x9a1bf0c2
0x6d861956
'''
sd
# input = [104, 101, 108, 108, 111, 119, 111, 114, 108, 100] + [0] * (72-10)
# input = h2b("a" * 72 * 2)
input = [0] * 9

header = 0xc7670049269c10462d3c5e86f42c60309eed72602fc1e6185efbba44328b9218
input[0] = header & 0xFFFFFFFFFFFFFFFF
header = header / 2**64
input[1] = header & 0xFFFFFFFFFFFFFFFF
header = header / 2**64
input[2] = header & 0xFFFFFFFFFFFFFFFF
header = header / 2**64
input[3] = header & 0xFFFFFFFFFFFFFFFF
header = header / 2**64
input[4] = 0xa8e9c2db86671707

print str(input)

use_ether_scan = False
# use_augor = True
result = call_const_function(key, 0, contract_hash, abi, "sponge", [input])[0]
for i in range(len(result)):
    print "0x%x" % result[i]




# aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa


